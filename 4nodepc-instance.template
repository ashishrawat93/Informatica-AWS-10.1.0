{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation template for creating four nodes of windows AMI and installing Informatica server.",
  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 key pair to enable SSH or RDS access to the instance",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "InstanceType" : {
      "Description" : "The type of EC2 instance. Use c3.2xlarge or higher.",
      "Type" : "String",
      "Default" : "c3.2xlarge",
      "AllowedValues" : [ "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge" ],
      "ConstraintDescription" : "Enter c3.large,c3.xlarge,c3.2xlarge,c3.4xlarge,c3.8xlarge,r3.large,r3.xlarge,r3.2xlarge,r3.4xlarge,r3.8xlarge,i2.xlarge,i2.2xlarge,i2.4xlarge,i2.8xlarge"
    },
    "InformaticaDomainPassword" : {
      "Description" : "Password for the Informatica domain.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "NoEcho" : "true"
    },
	"EncryptionKeyPhrase" : {
	  "Description" : "The text string used as the base word from which to generate an encryption key for the Informatica domain.", 
      "Type" : "String",
      "MinLength" : "8",
      "MaxLength" : "32",
      "NoEcho" : "true",
	  "AllowedPattern" : "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=\\S+$).{8,}$",
	  "ConstraintDescription" : "It should be 8 to 20 characters long, at least one uppercase letter at least one lowercase letter-at least one number Does not contain spaces"
	},
    "DatabaseType" : {
      "Description" : "The type of database to use in Amazon RDS. Currently, you can only use Oracle.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedValues" : [ "Oracle" ],
      "ConstraintDescription" : "Oracle"
    },
    "DatabaseAddress" : {
      "Description" : "Host name of the Amazon RDS database instance.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "DatabasePort" : {
      "Default" : "1521",
      "Description" : "Port number of the Amazon RDS database instance.",
      "Type" : "Number",
      "MinValue" : "1150",
      "MaxValue" : "65535"
    },
    "DatabaseUsername" : {
      "Description" : "Username for the database account in Amazon RDS.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "DatabasePassword" : {
      "Description" : "Password for the database account in Amazon RDS.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "NoEcho" : "true"
    },
    "DatabaseServiceName" : {
      "Description" : "The service name of the database account in Amazon RDS.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "RepositoryDBUser" : {
      "Description" : "Username for the database account to use as the PowerCenter repository or Model repository in Amazon RDS.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "RepositoryDBPassword" : {
      "Description" : "Password for the database account to use as the PowerCenter repository or Model repository in Amazon RDS.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters.",
      "NoEcho" : "true"
    },
    "SSHLocation" : {
      "Description" : "The range of IP address that you can use to RDP or SSH to the EC2 instance",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SubnetId" : {
      "Description" : "Subnet ID of the subnet to which you want to deploy the instance.",
      "Type" : "String",
      "AllowedPattern" : "(^subnet-[0-9a-z]{8}$)",
      "ConstraintDescription" : "must be a valid subnet id"
    },
    "VPCId" : {
      "Description" : "The VPC to launch the instance.",
      "Type" : "String",
      "AllowedPattern" : "(^vpc-[0-9a-z]{8}$)",
      "ConstraintDescription" : "The subnet should have the pattern vpc- followed by 8 alpha-numeric characters."
    },
    "PlacementGroupName" : {
      "Description" : "Name of an existing placement group to which you want to add the instance.",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "32",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {
        "AMI" : "ami-8dd0589a"
      }
    },
    "Config" : {
      "Settings" : {
        "IntegrationServiceName" : "PowerCenterIntegrationService",
        "RepositoryServiceName" : "PowerCenterRepository",
        "InformaticaDomainName" : "InfaDefaultDomain",
        "InformaticaServices" : 2,
        "Node1Name" : "PowercenterNode1",
        "Node2Name" : "PowercenterNode2",
		"Node3Name" : "PowercenterNode3",
		"Node4Name" : "PowercenterNode4",
        "Node2ServesAsGateway" : 1,
		"Node3ServesAsGateway" : 1,
		"Node4ServesAsGateway" : 1,
        "GridName" : "InfaDefaultGrid"
      }
    }
  },
  "Conditions" : {
    "UsePlacementGroup" : {
      "Fn::Not" : [ {
        "Fn::Equals" : [ {
          "Ref" : "PlacementGroupName"
        }, "unassigned" ]
      } ]
    }
  },
  "Resources" : {
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP and within VPC traffic",
        "VpcId" : {
          "Ref" : "VPCId"
        },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : {
            "Ref" : "SSHLocation"
          }
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "0",
          "ToPort" : "65535",
          "CidrIp" : {
            "Ref" : "SSHLocation"
          }
		}
		]	
      }
    },
    "InstanceSecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "IpProtocol" : "-1",
        "FromPort" : "-1",
        "ToPort" : "-1",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "InstanceSecurityGroup", "GroupId" ]
        },
        "GroupId" : {
          "Fn::GetAtt" : [ "InstanceSecurityGroup", "GroupId" ]
        }
      }
    },
    "MasterIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {
          "Ref" : "InformaticaMasterEC2Instance"
        }
      }
    },
    "InformaticaMasterEC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
			"config" : {
            "commands" : {
              "1-setup" : {
				"command" : { "Fn::Join" : [ "", [ "sh /home/ec2-user/InfaEc2Scripts/linInfaInstallerEc2.sh ", { "Ref" : "InformaticaDomainPassword" } ," ", { "Ref" : "DatabasePassword" }  ," ", { "Ref" : "RepositoryDBPassword" }  ," ", { "Ref" : "EncryptionKeyPhrase" } 
              ]]}
            }
				}
          }
		  }
        },
      "Properties" : {
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {
            "Fn::FindInMap" : [ "Config", "Settings", "Node1Name" ]
          }
        } ],
        "ImageId" : {
          "Fn::FindInMap" : [ "RegionMap", {
            "Ref" : "AWS::Region"
          }, "AMI" ]
        },
        "SubnetId" : {
          "Ref" : "SubnetId"
        },
        "SecurityGroupIds" : [ {
          "Ref" : "InstanceSecurityGroup"
        } ],
        "InstanceType" : {
          "Ref" : "InstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "PlacementGroupName" : {
          "Fn::If" : [ "UsePlacementGroup", {
            "Ref" : "PlacementGroupName"
          }, {
            "Ref" : "AWS::NoValue"
          } ]
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
         "#!/bin/bash \n", "echo \"Initializing variables\" \n", "export CREATE_DOMAIN=1 \n", "export JOIN_DOMAIN=0 \n", "export SERVES_AS_GATEWAY=0 \n", "export DB_TYPE=\"", {
              "Ref" : "DatabaseType"
            }, "\"\n", "export REPOSITORY_SERVICE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "RepositoryServiceName" ]
            }, "\"\n", "export INTEGRATION_SERVICE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "IntegrationServiceName" ]
            }, "\"\n", "export DB_ADDRESS=\"", {
              "Ref" : "DatabaseAddress"
            }, "\"\n", "export DB_PORT=\"", {
              "Ref" : "DatabasePort"
            }, "\"\n", "export DB_UNAME=\"", {
              "Ref" : "DatabaseUsername"
            }, "\"\n", "export DB_SERVICENAME=\"", {
              "Ref" : "DatabaseServiceName"
            }, "\"\n", "export DOMAIN_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "InformaticaDomainName" ]
            }, "\"\n", "export NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node1Name" ]
            }, "\"\n", "export GRID_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "GridName" ]
            }, "\"\n", "export REPO_USER=\"", {
              "Ref" : "RepositoryDBUser"
            }, "\"\n", "export INFORMATICA_SERVICES=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "InformaticaServices" ]
            }, "\"\n", "export JOIN_NODE_NAME=\"InformaticaNodeName\" \n", "export DOMAIN_HOST_NAME=\"$HOSTNAME\" \n", "echo \"running cfn init\" \n", "cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r InformaticaMasterEC2Instance ",
          "    --region ", { "Ref" : "AWS::Region" }, "\n",
		 "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n"
          ]]}}
        }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "InformaticaMasterWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "InformaticaMasterEC2Instance",
      "Properties" : {
        "Handle" : {
          "Ref" : "WaitHandle"
        },
        "Timeout" : "6000"
      }
    },
    "InformaticaNode2IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {
          "Ref" : "InformaticaNode2"
        }
      }
    },	
	"InformaticaNode2" : {
      "Type" : "AWS::EC2::Instance",
	   "DependsOn" : "InformaticaMasterWaitCondition",
      "Properties" : {
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {
            "Fn::FindInMap" : [ "Config", "Settings", "Node2Name" ]
          }
        } ],
        "ImageId" : {
          "Fn::FindInMap" : [ "RegionMap", {
            "Ref" : "AWS::Region"
          }, "AMI" ]
        },
        "SubnetId" : {
          "Ref" : "SubnetId"
        },
        "SecurityGroupIds" : [ {
          "Ref" : "InstanceSecurityGroup"
        } ],
        "InstanceType" : {
          "Ref" : "InstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "PlacementGroupName" : {
          "Fn::If" : [ "UsePlacementGroup", {
            "Ref" : "PlacementGroupName"
          }, {
            "Ref" : "AWS::NoValue"
          } ]
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
         "#!/bin/bash \n", "echo \"Initializing variables\" \n", "export SINGLE_NODE=0 \n", "export CREATE_DOMAIN=0 \n", "export JOIN_DOMAIN=1 \n", "export SERVES_AS_GATEWAY=", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node2ServesAsGateway" ]
            }, "\n", "export DB_TYPE=\"", {
              "Ref" : "DatabaseType"
            }, "\"\n", "export DB_ADDRESS=\"", {
              "Ref" : "DatabaseAddress"
            }, "\"\n", "export DB_PORT=\"", {
              "Ref" : "DatabasePort"
            }, "\"\n", "export DB_UNAME=\"", {
              "Ref" : "DatabaseUsername"
            }, "\"\n", "export DB_SERVICENAME=\"", {
              "Ref" : "DatabaseServiceName"
            }, "\"\n", "export DOMAIN_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "InformaticaDomainName" ]
            }, "\"\n", "export NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node1Name" ]
            }, "\"\n", "export GRID_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "GridName" ]
            }, "\"\n","export JOIN_NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node2Name" ]
            }, "\"\n", "export INTEGRATION_SERVICE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "IntegrationServiceName" ]
            }, "\"\n","export DOMAIN_HOST_NAME=\"", {
               "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "PrivateIp" ]
            }, "\"\n", "sh /home/ec2-user/InfaEc2Scripts/linInfaInstallerEc2.sh ", { "Ref" : "InformaticaDomainPassword" } ," ", { "Ref" : "DatabasePassword" }  ," null "  , { "Ref" : "EncryptionKeyPhrase" }
		
          ]]}}
        }
    },
    "InformaticaNode3IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {
          "Ref" : "InformaticaNode3"
        }
      }
    },		
	"InformaticaNode3" : {
      "Type" : "AWS::EC2::Instance",
	   "DependsOn" : "InformaticaMasterWaitCondition",
      "Properties" : {
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {
            "Fn::FindInMap" : [ "Config", "Settings", "Node3Name" ]
          }
        } ],
        "ImageId" : {
          "Fn::FindInMap" : [ "RegionMap", {
            "Ref" : "AWS::Region"
          }, "AMI" ]
        },
        "SubnetId" : {
          "Ref" : "SubnetId"
        },
        "SecurityGroupIds" : [ {
          "Ref" : "InstanceSecurityGroup"
        } ],
        "InstanceType" : {
          "Ref" : "InstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "PlacementGroupName" : {
          "Fn::If" : [ "UsePlacementGroup", {
            "Ref" : "PlacementGroupName"
          }, {
            "Ref" : "AWS::NoValue"
          } ]
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
         "#!/bin/bash \n", "echo \"Initializing variables\" \n", "export SINGLE_NODE=0 \n", "export CREATE_DOMAIN=0 \n", "export JOIN_DOMAIN=1 \n", "export SERVES_AS_GATEWAY=", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node3ServesAsGateway" ]
            }, "\n", "export DB_TYPE=\"", {
              "Ref" : "DatabaseType"
            }, "\"\n", "export DB_ADDRESS=\"", {
              "Ref" : "DatabaseAddress"
            }, "\"\n", "export DB_PORT=\"", {
              "Ref" : "DatabasePort"
            }, "\"\n", "export DB_UNAME=\"", {
              "Ref" : "DatabaseUsername"
            }, "\"\n", "export DB_SERVICENAME=\"", {
              "Ref" : "DatabaseServiceName"
            }, "\"\n", "export DOMAIN_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "InformaticaDomainName" ]
            }, "\"\n", "export NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node1Name" ]
            }, "\"\n", "export GRID_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "GridName" ]
            }, "\"\n","export JOIN_NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node3Name" ]
            }, "\"\n", "export INTEGRATION_SERVICE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "IntegrationServiceName" ]
            }, "\"\n","export DOMAIN_HOST_NAME=\"", {
               "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "PrivateIp" ]
            }, "\"\n", "sh /home/ec2-user/InfaEc2Scripts/linInfaInstallerEc2.sh ", { "Ref" : "InformaticaDomainPassword" } ," ", { "Ref" : "DatabasePassword" }  ," null "  , { "Ref" : "EncryptionKeyPhrase" }
		
          ]]}}
        }
    },
    "InformaticaNode4IPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {
          "Ref" : "InformaticaNode4"
        }
      }
    },			
	"InformaticaNode4" : {
      "Type" : "AWS::EC2::Instance",
	   "DependsOn" : "InformaticaMasterWaitCondition",
      "Properties" : {
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {
            "Fn::FindInMap" : [ "Config", "Settings", "Node4Name" ]
          }
        } ],
        "ImageId" : {
          "Fn::FindInMap" : [ "RegionMap", {
            "Ref" : "AWS::Region"
          }, "AMI" ]
        },
        "SubnetId" : {
          "Ref" : "SubnetId"
        },
        "SecurityGroupIds" : [ {
          "Ref" : "InstanceSecurityGroup"
        } ],
        "InstanceType" : {
          "Ref" : "InstanceType"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "PlacementGroupName" : {
          "Fn::If" : [ "UsePlacementGroup", {
            "Ref" : "PlacementGroupName"
          }, {
            "Ref" : "AWS::NoValue"
          } ]
        },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
         "#!/bin/bash \n", "echo \"Initializing variables\" \n", "export SINGLE_NODE=0 \n", "export CREATE_DOMAIN=0 \n", "export JOIN_DOMAIN=1 \n", "export SERVES_AS_GATEWAY=", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node4ServesAsGateway" ]
            }, "\n", "export DB_TYPE=\"", {
              "Ref" : "DatabaseType"
            }, "\"\n", "export DB_ADDRESS=\"", {
              "Ref" : "DatabaseAddress"
            }, "\"\n", "export DB_PORT=\"", {
              "Ref" : "DatabasePort"
            }, "\"\n", "export DB_UNAME=\"", {
              "Ref" : "DatabaseUsername"
            }, "\"\n", "export DB_SERVICENAME=\"", {
              "Ref" : "DatabaseServiceName"
            }, "\"\n", "export DOMAIN_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "InformaticaDomainName" ]
            }, "\"\n", "export NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node1Name" ]
            }, "\"\n", "export GRID_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "GridName" ]
            }, "\"\n","export JOIN_NODE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "Node4Name" ]
            }, "\"\n", "export INTEGRATION_SERVICE_NAME=\"", {
              "Fn::FindInMap" : [ "Config", "Settings", "IntegrationServiceName" ]
            }, "\"\n","export DOMAIN_HOST_NAME=\"", {
               "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "PrivateIp" ]
            }, "\"\n", "sh /home/ec2-user/InfaEc2Scripts/linInfaInstallerEc2.sh ", { "Ref" : "InformaticaDomainPassword" } ," ", { "Ref" : "DatabasePassword" }  ," null "  , { "Ref" : "EncryptionKeyPhrase" }
		
          ]]}}
        }
    }
  },
  
  "Outputs" : {
    "InstanceId" : {
      "Description" : "InstanceId of the newly created EC2 instance",
      "Value" : {
        "Ref" : "InformaticaMasterEC2Instance"
      }
    },
    "AZ" : {
      "Description" : "Availability Zone of the newly created EC2 instance",
      "Value" : {
        "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "AvailabilityZone" ]
      }
    },
    "PublicDNS" : {
      "Description" : "Public DNSName of the newly created EC2 instance",
      "Value" : {
        "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "PublicDnsName" ]
      }
    },
    "PublicIP" : {
      "Description" : "Public IP address of the newly created EC2 instance",
      "Value" : {
        "Fn::GetAtt" : [ "InformaticaMasterEC2Instance", "PublicIp" ]
      }
    }
  }
}